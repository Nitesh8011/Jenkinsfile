#!/bin/bash
# shellcheck disable=SC2034,SC2044

DIR="$(pwd)"

display_help(){
  echo "./$(basename "$0") [ -d | --directory DIRECTORY ] [ -e | --enforce-all-schemas ] [ -h | --help ] [ -sl | --schema-location ]
Script to validate the manifests generated by Kustomize
Where:
  -d  | --directory DIRECTORY  Base directory containing Kustomize overlays
  -e  | --enforce-all-schemas  Enable enforcement of all schemas
  -h  | --help                 Display this help text
  -sl | --schema-location      Location containing schemas"
}

which kustomize && KUSTOMIZE_CMD="kustomize build"
KUSTOMIZE_CMD="${KUSTOMIZE_CMD:kustomize}"
IGNORE_MISSING_SCHEMAS="--ignore-missing-schemas"
SCHEMA_LOCATION="${DIR}/openshift-json-schema"
KUSTOMIZE_DIRS="${DIR}"

init(){
  for i in "${@}"
  do
    case $i in
      -d | --directory )
        shift
        KUSTOMIZE_DIRS="${1}"
        shift
        ;;
      -e | --enforce-all-schemas )
        IGNORE_MISSING_SCHEMAS=""
        shift
        ;;
      -sl | --schema-location )
        shift
        SCHEMA_LOCATION="${1}"
        shift
        ;;
      -h | --help )
        display_help
        exit 0
        ;;
      -*) echo >&2 "Invalid option: " "${@}"
        exit 1
        ;;
    esac
  done
}

kustomization_build(){
    BUILD=${1}
    if [ ! -d "$BUILD" ]; then
        echo "Error: $BUILD is not a directory."
        exit 1
    fi
    echo "Running kustomize build on: ${BUILD}"
    KUSTOMIZE_BUILD_OUTPUT=$(${KUSTOMIZE_CMD} "${BUILD}")
    build_response=$?

    if [ $build_response -ne 0 ]; then
        echo "[ERROR]"
        exit 1
    fi

    echo "[OK]"
}

process_kustomization(){
    echo "Validating..."

    for BUILD in $(find "${KUSTOMIZE_DIRS}" -name "kustomization.yaml" -exec dirname {} \;)
    do
        echo "Processing directory: ${BUILD}"
        kustomization_build "${BUILD}"
    done
}

init "${@}"
process_kustomization